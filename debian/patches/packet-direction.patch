Author: Ludovico Cavedon <cavedon@debian.org>
Description: Compute packet_direction consistently independently from endianness
    Ensure packet_direction is computed in the same way on little endian and
    big endian architectures.
    This change will convert IP addresses and port from little endian to host
    endian (instead of converting from network endian to host endian) so
    that it does not change the behavior on little endian architecture where
    ndpi is usually developed.
    A better (but more invasive) change would be to use the ntoh*()
    functions and then adjust all affected tests.
Forwarded: https://github.com/ntop/nDPI/pull/659

Index: ndpi/src/lib/ndpi_main.c
===================================================================
--- ndpi.orig/src/lib/ndpi_main.c
+++ ndpi/src/lib/ndpi_main.c
@@ -3690,7 +3690,7 @@ void ndpi_connection_tracking(struct ndp
   if(ndpi_struct->direction_detect_disable) {
     packet->packet_direction = flow->packet_direction;
   } else {
-    if(iph != NULL && iph->saddr < iph->daddr)
+    if(iph != NULL && le32toh(iph->saddr) < le32toh(iph->daddr))
       packet->packet_direction = 1;
 
 #ifdef NDPI_DETECTION_SUPPORT_IPV6
@@ -3714,7 +3714,7 @@ void ndpi_connection_tracking(struct ndp
     packet->num_retried_bytes = 0;
 
     if(!ndpi_struct->direction_detect_disable)
-      packet->packet_direction = (tcph->source < tcph->dest) ? 1 : 0;
+      packet->packet_direction = (le16toh(tcph->source) < le16toh(tcph->dest)) ? 1 : 0;
 
     if(tcph->syn != 0 && tcph->ack == 0 && flow->l4.tcp.seen_syn == 0 && flow->l4.tcp.seen_syn_ack == 0
        && flow->l4.tcp.seen_ack == 0) {
@@ -3778,7 +3778,7 @@ void ndpi_connection_tracking(struct ndp
     }
   } else if(udph != NULL) {
     if(!ndpi_struct->direction_detect_disable)
-      packet->packet_direction = (udph->source < udph->dest) ? 1 : 0;
+      packet->packet_direction = (le16toh(udph->source) < le16toh(udph->dest)) ? 1 : 0;
   }
 
   if(flow->packet_counter < MAX_PACKET_COUNTER && packet->payload_packet_len) {
